const createProductSchema = z.object({ name: z.string().min(1, { message: 'Name is required' }), image: z .custom<File>((v) => v instanceof File, { message: 'Image is required', }) }); const updateProductSchema = createProductSchema.extend({ image: createProductSchema.shape.image.optional(), }); export type ProductForm2Values = | z.infer<typeof createProductSchema> | z.infer<typeof updateProductSchema>; interface ProductForm2Props { product?: Product; } export const ProductForm2 = ({ product }: ProductForm2Props) => { const [imagePreview, setImagePreview] = useState<string | null>( product ? product.image : null, ); const isAddMode = !product;

const { register, handleSubmit, control, reset, formState: { errors, isSubmitting, isDirty }, } = useForm<ProductForm2Values>({ resolver: zodResolver( isAddMode ? createProductSchema : updateProductSchema, ), defaultValues: { name: product?.name ?? '', image: undefined, }, }); // revoke object URL to avoid memory leaks useEffect(() => { return () => { if (imagePreview) URL.revokeObjectURL(imagePreview); }; }, [imagePreview]);

const onSubmitHandler = async (data: ProductForm2Values) => { console.log(data); let imageUrl: string | undefined; if (data.image) { // build FormData for uploading image const formData = new FormData(); formData.append('file', data.image); // mock upload image to server to get image url imageUrl = await new Promise<string>((resolve) => { setTimeout(() => { resolve('https://via.placeholder.com/150'); }, 1000); }); } if (isAddMode) { // create product console.log({ ...data, image: imageUrl! }); } else { // update product console.log({ id: product!.id, ...data, image: imageUrl }); } reset(); setImagePreview(product?.image ?? null); };

return ( <form onSubmit={handleSubmit(onSubmitHandler)}> <input {...register('name')} /> {errors.name && <span>{errors.name.message}</span>} <Controller name="image" control={control} render={({ field: { ref, name, onBlur, onChange } }) => ( <input type="file" ref={ref} name={name} onBlur={onBlur} onChange={(e) => { const file = e.target.files?.[0]; onChange(e.target.files?.[0]); setImagePreview(file ? URL.createObjectURL(file) : null); }} /> )} /> {imagePreview && <img src={imagePreview} alt="preview" />} {errors.image && <span>{errors.image.message}</span>} <button type="submit" disabled={(!isAddMode && !isDirty) || isSubmitting}> {isSubmitting ? 'Submitting...' : 'Submit'} </button> </form> ); };